# -*- coding: utf-8 -*-
"""
Created on Thu Aug 15 11:00:39 2019

Train ARRInet CNN using pre-tiled patches from Jared Shenson's ARRIScope images
Before running: ensure tiled image were generated by tile_data_GSL.py

Transfer learning tutorial:
https://pytorch.org/tutorials/beginner/transfer_learning_tutorial.html

@author: CTLab
George S. Liu
8-15-19

Dependencies: dataloading_arriGSL.py
"""

from __future__ import print_function, division

import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
import numpy as np
import torchvision
from torchvision import datasets, models, transforms
import matplotlib.pyplot as plt
import time
import os
import copy
import random
import math
import dataloading_arriGSL
import densenet_av

plt.ion()   # interactive mode

MEAN_CHANNEL_PIXELVALS = np.array([
178.3673522,
159.2136305,
145.7320306,
4.50154166,
1.35834203,
26.66413484,
1.10656146,
56.94770658,
5.14473639,
128.0806568,
57.32424962,
93.45134808,
45.17744126,
2.10083132,
3.78928152,
4.84619569,
4.0540281,
4.69607718,
123.0301386,
84.93495828,
25.96622659
])

STD_CHANNEL_PIXELVALS = np.array([
18.05371603,
21.19270681,
24.26668387,
4.87049387,
1.60681874,
12.31887814,
7.65738986,
19.56593939,
10.00423988,
16.50242333,
16.1129809,
15.57760365,
11.38605095,
2.18528431,
4.13749091,
3.18178838,
1.68858641,
2.811973,
22.58913003,
23.27044106,
23.48049806
])

# Hyper-parameters
BATCH_SIZE = 64 # Dunnmon recommends 64-256 (>=16) 
    
#%% Utilities
def imshow(inp, title=None):
    """Imshow for Tensor."""
    inp = inp.numpy().transpose((1, 2, 0))
    mean = np.array(MEAN_CHANNEL_PIXELVALS[:3]) 
    std = np.array(STD_CHANNEL_PIXELVALS[:3])
    inp = std * inp + mean
    inp = np.clip(inp, 0, 1)
    plt.imshow(inp)
    if title is not None:
        plt.title(title)
    plt.pause(0.001)  # pause a bit so that plots are updated
        
#    Train the model
#Now, let’s write a general function to train a model. Here, we will illustrate:
#
#Scheduling the learning rate
#Saving the best model
#In the following, parameter scheduler is an LR scheduler object from torch.optim.lr_scheduler.
def train_model(model, criterion, optimizer, scheduler, dataloaders, device, dataset_sizes, num_epochs=25):
    since = time.time()

    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(num_epochs):
        print('Epoch {}/{}'.format(epoch, num_epochs - 1))
        print('-' * 10)

        # Each epoch has a training and validation phase
        for phase in ['train', 'val']:
            if phase == 'train':
                scheduler.step()
                model.train()  # Set model to training mode
            else:
                model.eval()   # Set model to evaluate mode

            running_loss = 0.0
            running_corrects = 0

            # Iterate over data.
            for inputs, labels in dataloaders[phase]:
                inputs = inputs.to(device)
                labels = labels.to(device)

                # zero the parameter gradients
                optimizer.zero_grad()

                # forward
                # track history if only in train
                with torch.set_grad_enabled(phase == 'train'):
                    outputs = model(inputs)
                    _, preds = torch.max(outputs, 1)
                    loss = criterion(outputs, labels)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                # statistics
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)

            epoch_loss = running_loss / dataset_sizes[phase]
            epoch_acc = running_corrects.double() / dataset_sizes[phase]

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                phase, epoch_loss, epoch_acc))

            # deep copy the model
            if phase == 'val' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())

        print()

    time_elapsed = time.time() - since
    print('Training complete in {:.0f}m {:.0f}s'.format(
        time_elapsed // 60, time_elapsed % 60))
    print('Best val Acc: {:4f}'.format(best_acc))

    # load best model weights
    model.load_state_dict(best_model_wts)
    return model

#% Visualize model predictions
#    Generic function to display predictions for a few images
def visualize_model(model, dataloaders, device, class_names, num_images=6):
    was_training = model.training
    model.eval()
    images_so_far = 0
    fig = plt.figure()

    with torch.no_grad():
        for i, (inputs, labels) in enumerate(dataloaders['val']):
            inputs = inputs.to(device)
            labels = labels.to(device)

            outputs = model(inputs)
            _, preds = torch.max(outputs, 1)

            for j in range(inputs.size()[0]):
                images_so_far += 1
                ax = plt.subplot(num_images//2, 2, images_so_far)
                ax.axis('off')
                ax.set_title('predicted: {}'.format(class_names[preds[j]]))
                imshow(inputs.cpu().data[j])

                if images_so_far == num_images:
                    model.train(mode=was_training)
                    return
        model.train(mode=was_training)
    
#%% Main routine
def main():
    #%% Data loading
    # Data augmentation and normalization for training
    # Just normalization for validation
    data_transforms = {
        'train': transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize(MEAN_CHANNEL_PIXELVALS[:3], STD_CHANNEL_PIXELVALS[:3])
        ]),
        'val': transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize(MEAN_CHANNEL_PIXELVALS[:3], STD_CHANNEL_PIXELVALS[:3])
        ]),
    }
    
    data_dir = 'C:/Users/CTLab/Documents/George/Python_data/hymenoptera_data'
    data_dir = 'C:/Users/CTLab/Documents/George/Python_data/arritissue_data/patches2d'
    image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                              data_transforms[x])
                      for x in ['train', 'val']}
    dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=BATCH_SIZE,
                                                 shuffle=True, num_workers=4)
                  for x in ['train', 'val']}
    dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}
    class_names = image_datasets['train'].classes
    num_classes = len(class_names)
    
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    print(dataset_sizes)
    print(num_classes)
    print(device)
    
    #%% Visualize a few images
    #Let’s visualize a few training images so as to understand the data augmentations.
    
    # Get a batch of training data
    inputs, classes = next(iter(dataloaders['train']))
    
    # Make a grid from batch
    out = torchvision.utils.make_grid(inputs)
    
    imshow(out, title=[class_names[x] for x in classes])
            
    #%%Finetuning the convnet
    #Load a pretrained model and reset final fully connected layer.
    model_ft = models.resnet18(pretrained=True)
    num_ftrs = model_ft.fc.in_features
    model_ft.fc = nn.Linear(num_ftrs, num_classes)
    
    model_ft = model_ft.to(device)
    
    criterion = nn.CrossEntropyLoss()
    
    # Observe that all parameters are being optimized
    optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)
    
    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)
    
    #%% Train and evaluate
    #It should take around 15-25 min on CPU. On GPU though, it takes less than a minute.
    model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,
                           dataloaders, device, dataset_sizes, num_epochs=25)
    
    visualize_model(model_ft,  dataloaders, device, class_names)
    
    
    
    #%% ConvNet as fixed feature extractor
    #Here, we need to freeze all the network except the final layer. We need to set requires_grad == False to freeze the parameters so that the gradients are not computed in backward().
    
    model_conv = torchvision.models.resnet18(pretrained=True)
    for param in model_conv.parameters():
        param.requires_grad = False
    
    # Parameters of newly constructed modules have requires_grad=True by default
    num_ftrs = model_conv.fc.in_features
    model_conv.fc = nn.Linear(num_ftrs, 2)
    
    model_conv = model_conv.to(device)
    
    criterion = nn.CrossEntropyLoss()
    
    # Observe that only parameters of final layer are being optimized as
    # opposed to before.
    optimizer_conv = optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)
    
    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_conv, step_size=7, gamma=0.1)
    
    #%% Train and evaluate
    #On CPU this will take about half the time compared to previous scenario. This is expected as gradients don’t need to be computed for most of the network. However, forward does need to be computed.
    model_conv = train_model(model_conv, criterion, optimizer_conv,
                             exp_lr_scheduler, dataloaders, device, dataset_sizes, num_epochs=25)
    
    visualize_model(model_conv, dataloaders, device, class_names)
    
    plt.ioff()
    plt.show()
    
if __name__=='__main__':
    main()